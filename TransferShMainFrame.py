"""Subclass of MainFrame, which is generated by wxFormBuilder."""

import requests
import os
import wx
import transfersh

# Implementing MainFrame
class TransferShMainFrame( transfersh.MainFrame ):
	def __init__( self, parent ):
		transfersh.MainFrame.__init__( self, parent )
		self.serverUrl = 'http://transfer.sh'
		self.options = {
			'Max-Days': '14'
		}
		self.isBusy = True
		self.idle()
		self.logOutput('Output Log:')
		self.logOutput('Start upload your files to transfer.sh')
		self.setAppIcon()


	def setAppIcon(self):
		icon = wx.Icon()
		icon.CopyFromBitmap(wx.Bitmap('res/icon.ico', wx.BITMAP_TYPE_ANY))
		self.SetIcon(icon)


	def handleBtnUpload(self, event):
		if (self.isBusy):
			event.Skip()
		fileDir = self.filePicker.GetPath().strip()
		if (fileDir == ''):
			self.logOutput('File masih kosong!').idle()
		elif not os.path.exists(fileDir):
			self.logOutput('File yang diberikan tidak ditemukan pada sistem.').idle()

		self.updateOptions()
		self.doUploadFile()

	def updateOptions(self, event=None):
		self.options['Max-Days'] = str(self.optionSliderDays.GetValue())
		if (isinstance(self.optionMaxDownload.GetValue(), int)) and self.optionMaxDownload.GetValue() > 0:
			self.options['Max-Downloads'] = str(self.optionMaxDownload.GetValue())

	def doUploadFile(self):
		
		filepath = self.filePicker.GetPath()
		self.statusBar.SetStatusText(f'Uploading {filepath} ...')
		self.btnUpload.Disable()
		self.filePicker.Disable()
		self.isBusy = True

		try:
			filename = os.path.basename(filepath)
			response = requests.put(f'{self.serverUrl}/{filename}', files={'file': open(filepath, 'rb')}, headers=self.options)
			if response.ok:
				self.logOutput('=============[Upload Done]=============')
				self.logOutput(f'File Dir: {filepath}')
				self.logOutput(f'File Size: {self.human_readable_size(os.path.getsize(filepath))}')
				self.logOutput(f'Download Url: {response.text}')
				# self.logOutput(f'Delete Url: {response.headers["X-Url-Delete"]}')
			else:
				self.logOutput(f'Upload failed: {response.text}, Response Code: {response.status_code}')

		except Exception as err:
			self.logOutput(f'Error occured: {err}')

		finally:
			self.filePicker.SetPath('')
			self.idle()

	def idle(self):
		self.btnUpload.Enable()
		self.filePicker.Enable()
		self.statusBar.SetStatusText('Idle')
		self.isBusy = False

	def logOutput(self, text):
		lastVal = self.resultBox.GetValue() + "\n" if self.resultBox.GetValue().strip() != '' else ''
		self.resultBox.SetValue(lastVal + text);
		return self

	def fileChangeHandler( self, event ):
		self.statusBar.SetStatusText(f'Selected file: {os.path.basename(self.filePicker.GetPath())} ({self.human_readable_size(os.path.getsize(self.filePicker.GetPath()))})')

	def human_readable_size(self, num, decimal_places=2):
		for unit in ['','Ki','Mi','Gi','Ti','Pi','Ei','Zi']:
			if abs(num) < 1024.0:
				return "%3.1f %sB" % (num, unit)
			num /= 1024.0
		return "%.1f %sB" % (num, 'Yi')

