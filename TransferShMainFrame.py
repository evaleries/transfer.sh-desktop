"""Subclass of MainFrame, which is generated by wxFormBuilder."""

import requests
import os
import wx
import transfersh
import wx.lib.newevent
from threads import UploadThread, DeleteThread

ItemActivated, EVT_ITEM_ACTIVATED = wx.lib.newevent.NewEvent()

# Implementing MainFrame
class TransferShMainFrame( transfersh.MainFrame ):
	def __init__( self, parent ):
		transfersh.MainFrame.__init__( self, parent )
		self.serverUrl = 'http://transfer.sh'
		self.options = {
			'Max-Days': '14'
		}
		self.idle()
		self.logOutput('Output Log:')
		self.logOutput('Start upload your files to transfer.sh')
		self.setAppIcon()
		self.Bind(EVT_ITEM_ACTIVATED, self.eventListener)

	def setAppIcon(self):
		icon = wx.Icon()
		icon.CopyFromBitmap(wx.Bitmap('res/icon.ico', wx.BITMAP_TYPE_ANY))
		self.SetIcon(icon)

	def eventListener(self, event):
		if isinstance(event.thread, UploadThread):
			return self.handleEventUpload(event) 
		elif isinstance(event.thread, DeleteThread):
			return self.handleEventDelete(event)

	def updateOptions(self, event=None):
		self.options['Max-Days'] = str(self.optionSliderDays.GetValue())
		if (isinstance(self.optionMaxDownload.GetValue(), int)) and self.optionMaxDownload.GetValue() > 0:
			self.options['Max-Downloads'] = str(self.optionMaxDownload.GetValue())

	def handleBtnUpload(self, event):

		fileDir = self.filePicker.GetPath().strip()
		fileName = os.path.basename(fileDir)
		if fileDir == '':
			return self.logOutput("File can't be empty!").idle()
		elif not os.path.exists(fileDir):
			return self.logOutput("The selected file doesn't exists on the system.").idle()

		self.statusBar.SetStatusText(f'Uploading {fileDir} ...')

		self.updateOptions()
		workerThread = UploadThread(ItemActivated=ItemActivated, frame=self, serverUrl=self.serverUrl, filePath=fileDir, options=self.options, fileName=fileName)
		workerThread.daemon = True
		workerThread.start()
		self.logOutput(f'Upload Processed with Thread ID {workerThread.ident}')

	def handleEventUpload(self, event):
		try:
			response, exception, filepath = event.data

			if isinstance(response, requests.Response):
				if response.ok:
					self.logOutput(f'=============[Upload Done - {event.thread.ident}]=============')
					self.logOutput(f'File Path: {filepath}')
					if os.path.exists(filepath): self.logOutput(f'File Size: {self.human_readable_size(os.path.getsize(filepath))}')
					self.logOutput(f'Url Download: {response.text}')
					self.logOutput(f'Url Delete: {response.headers["X-Url-Delete"]}')
				else:
					self.logOutput(f'Upload failed: {response.text}, Response Code: {response.status_code}')

			if exception:
				raise Exception(exception)

		except Exception as err:
			self.logOutput(f'Error occured: {err}')

		finally:
			self.filePicker.SetPath('')
			self.idle()

	def handleBtnDelete(self, event):
		deleteUrl = self.deleteUrl.GetValue().strip()
		if deleteUrl == '':
			return event.Skip()

		r = wx.MessageDialog(
					None,
					('This file will be deleted. Are you sure?'),
					('Delete Confirmation'),
					wx.YES_NO | wx.NO_DEFAULT | wx.ICON_QUESTION
				).ShowModal()

		if r != wx.ID_YES:
			return

		self.statusBar.SetStatusText(f'Deleting file from {deleteUrl} ...')

		workerThread = DeleteThread(ItemActivated=ItemActivated, frame=self, deleteUrl=deleteUrl)
		workerThread.daemon = True
		workerThread.start()
		self.logOutput(f'Delete Processed with Thread ID {workerThread.ident}')

	def handleEventDelete(self, event):
		try:
			response, exception, deleteUrl = event.data

			if isinstance(response, requests.Response):
				if response.ok:
					self.logOutput(f'=============[Delete Done - {event.thread.ident}]=============')
					self.logOutput(f'File successfully deleted, URL: {deleteUrl}.')
					self.deleteUrl.SetValue('')
				else:
					self.logOutput(f'Delete failed: {response.text}, Response Code: {response.status_code}')

			if exception:
				raise Exception(exception)

		except Exception as err:
			self.logOutput(f'Error occured: {err}')

		finally:
			self.idle()

	def handleBtnClearLog(self, event):
		self.resultBox.SetValue('')

	def idle(self):
		self.statusBar.SetStatusText('Idle')

	def logOutput(self, text):
		lastVal = self.resultBox.GetValue() + "\n" if self.resultBox.GetValue().strip() != '' else ''
		self.resultBox.SetValue(lastVal + text)
		self.resultBox.ShowPosition(self.resultBox.GetLastPosition())
		return self

	def fileChangeHandler( self, event ):
		self.statusBar.SetStatusText(f'Selected file: {os.path.basename(self.filePicker.GetPath())} ({self.human_readable_size(os.path.getsize(self.filePicker.GetPath()))})')

	def human_readable_size(self, num, decimal_places=2):
		for unit in ['','Ki','Mi','Gi','Ti','Pi','Ei','Zi']:
			if abs(num) < 1024.0:
				return "%3.1f %sB" % (num, unit)
			num /= 1024.0
		return "%.1f %sB" % (num, 'Yi')

